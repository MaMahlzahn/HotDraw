/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	� by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.standard

import org.jhotdraw.standard.StandardDrawing
import junit.framework.TestCase

// JUnitDoclet begin import
// JUnitDoclet end import
/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
// JUnitDoclet begin javadoc_class
/**
 * TestCase StandardDrawingTest is generated by
 * JUnitDoclet to hold the tests for StandardDrawing.
 * @see org.jhotdraw.standard.StandardDrawing
 */
class StandardDrawingTest(name: String) extends TestCase(name) {

  /**
   * Factory method for instances of the class to be tested.
   */
  def createInstance: StandardDrawing = {
    return new StandardDrawing
  }

  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  override protected def setUp {
    super.setUp
    standarddrawing = createInstance
  }

  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  override protected def tearDown {
    standarddrawing = null
    super.tearDown
  }

  /**
   * Method testAddDrawingChangeListener is testing addDrawingChangeListener
   * @see org.jhotdraw.standard.StandardDrawing#addDrawingChangeListener(org.jhotdraw.framework.DrawingChangeListener)
   */
  def testAddDrawingChangeListener {
  }

  /**
   * Method testRemoveDrawingChangeListener is testing removeDrawingChangeListener
   * @see org.jhotdraw.standard.StandardDrawing#removeDrawingChangeListener(org.jhotdraw.framework.DrawingChangeListener)
   */
  def testRemoveDrawingChangeListener {
  }

  /**
   * Method testDrawingChangeListeners is testing drawingChangeListeners
   * @see org.jhotdraw.standard.StandardDrawing#drawingChangeListeners()
   */
  def testDrawingChangeListeners {
  }

  /**
   * Method testOrphan is testing orphan
   * @see org.jhotdraw.standard.StandardDrawing#orphan(org.jhotdraw.framework.Figure)
   */
  def testOrphan {
  }

  /**
   * Method testAdd is testing add
   * @see org.jhotdraw.standard.StandardDrawing#add(org.jhotdraw.framework.Figure)
   */
  def testAdd {
  }

  /**
   * Method testFigureInvalidated is testing figureInvalidated
   * @see org.jhotdraw.standard.StandardDrawing#figureInvalidated(org.jhotdraw.framework.FigureChangeEvent)
   */
  def testFigureInvalidated {
  }

  /**
   * Method testFireDrawingTitleChanged is testing fireDrawingTitleChanged
   * @see org.jhotdraw.standard.StandardDrawing#fireDrawingTitleChanged()
   */
  def testFireDrawingTitleChanged {
  }

  /**
   * Method testFigureRequestUpdate is testing figureRequestUpdate
   * @see org.jhotdraw.standard.StandardDrawing#figureRequestUpdate(org.jhotdraw.framework.FigureChangeEvent)
   */
  def testFigureRequestUpdate {
  }

  /**
   * Method testHandles is testing handles
   * @see org.jhotdraw.standard.StandardDrawing#handles()
   */
  def testHandles {
  }

  /**
   * Method testDisplayBox is testing displayBox
   * @see org.jhotdraw.standard.StandardDrawing#displayBox()
   */
  def testDisplayBox {
  }

  /**
   * Method testBasicDisplayBox is testing basicDisplayBox
   * @see org.jhotdraw.standard.StandardDrawing#basicDisplayBox(java.awt.Point, java.awt.Point)
   */
  def testBasicDisplayBox {
  }

  /**
   * Method testLock is testing lock
   * @see org.jhotdraw.standard.StandardDrawing#lock()
   */
  def testLock {
  }

  /**
   * Method testUnlock is testing unlock
   * @see org.jhotdraw.standard.StandardDrawing#unlock()
   */
  def testUnlock {
  }

  /**
   * Method testSetGetTitle is testing setTitle
   * and getTitle together by setting some value
   * and verifying it by reading.
   * @see org.jhotdraw.standard.StandardDrawing#setTitle(java.lang.String)
   * @see org.jhotdraw.standard.StandardDrawing#getTitle()
   */
  def testSetGetTitle {
    val tests: Array[String] = Array("", " ", "a", "A", "�", "�", "0123456789", "012345678901234567890", "\n", null)
    tests foreach { e =>
      standarddrawing.setTitle(e)
      assert(e == standarddrawing.getTitle)
    }
  }

  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  def testVault {
  }

  private var standarddrawing: StandardDrawing = null
}

