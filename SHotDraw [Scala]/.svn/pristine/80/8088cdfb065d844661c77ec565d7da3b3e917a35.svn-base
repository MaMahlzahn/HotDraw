/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	ï¿½ by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.contrib

import org.jhotdraw.contrib.PolygonFigure
import junit.framework.TestCase

// JUnitDoclet begin import
// JUnitDoclet end import
/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
// JUnitDoclet begin javadoc_class
/**
 * TestCase PolygonFigureTest is generated by
 * JUnitDoclet to hold the tests for PolygonFigure.
 * @see org.jhotdraw.contrib.PolygonFigure
 */
class PolygonFigureTest(name: String) extends TestCase(name) {

  /**
   * Factory method for instances of the class to be tested.
   */
  def createInstance: PolygonFigure = {
    new PolygonFigure
  }

  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  override protected def setUp {
    super.setUp
    polygonfigure = createInstance
  }

  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  override protected def tearDown {
    polygonfigure = null
    super.tearDown
  }

  /**
   * Method testDisplayBox is testing displayBox
   * @see org.jhotdraw.contrib.PolygonFigure#displayBox()
   */
  def testDisplayBox {
  }

  /**
   * Method testIsEmpty is testing isEmpty
   * @see org.jhotdraw.contrib.PolygonFigure#isEmpty()
   */
  def testIsEmpty {
  }

  /**
   * Method testHandles is testing handles
   * @see org.jhotdraw.contrib.PolygonFigure#handles()
   */
  def testHandles {
  }

  /**
   * Method testBasicDisplayBox is testing basicDisplayBox
   * @see org.jhotdraw.contrib.PolygonFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
   */
  def testBasicDisplayBox {
  }

  /**
   * Method testGetPolygon is testing getPolygon
   * @see org.jhotdraw.contrib.PolygonFigure#getPolygon()
   */
  def testGetPolygon {
  }

  /**
   * Method testGetInternalPolygon is testing getInternalPolygon
   * @see org.jhotdraw.contrib.PolygonFigure#getInternalPolygon()
   */
  def testGetInternalPolygon {
  }

  /**
   * Method testCenter is testing center
   * @see org.jhotdraw.contrib.PolygonFigure#center()
   */
  def testCenter {
  }

  /**
   * Method testPoints is testing points
   * @see org.jhotdraw.contrib.PolygonFigure#points()
   */
  def testPoints {
  }

  /**
   * Method testPointCount is testing pointCount
   * @see org.jhotdraw.contrib.PolygonFigure#pointCount()
   */
  def testPointCount {
  }

  /**
   * Method testBasicMoveBy is testing basicMoveBy
   * @see org.jhotdraw.contrib.PolygonFigure#basicMoveBy(int, int)
   */
  def testBasicMoveBy {
  }

  /**
   * Method testDrawBackground is testing drawBackground
   * @see org.jhotdraw.contrib.PolygonFigure#drawBackground(java.awt.Graphics)
   */
  def testDrawBackground {
  }

  /**
   * Method testDrawFrame is testing drawFrame
   * @see org.jhotdraw.contrib.PolygonFigure#drawFrame(java.awt.Graphics)
   */
  def testDrawFrame {
  }

  /**
   * Method testContainsPoint is testing containsPoint
   * @see org.jhotdraw.contrib.PolygonFigure#containsPoint(int, int)
   */
  def testContainsPoint {
  }

  /**
   * Method testConnectorAt is testing connectorAt
   * @see org.jhotdraw.contrib.PolygonFigure#connectorAt(int, int)
   */
  def testConnectorAt {
  }

  /**
   * Method testAddPoint is testing addPoint
   * @see org.jhotdraw.contrib.PolygonFigure#addPoint(int, int)
   */
  def testAddPoint {
  }

  /**
   * Method testSetPointAt is testing setPointAt
   * @see org.jhotdraw.contrib.PolygonFigure#setPointAt(java.awt.Point, int)
   */
  def testSetPointAt {
  }

  /**
   * Method testInsertPointAt is testing insertPointAt
   * @see org.jhotdraw.contrib.PolygonFigure#insertPointAt(java.awt.Point, int)
   */
  def testInsertPointAt {
  }

  /**
   * Method testRemovePointAt is testing removePointAt
   * @see org.jhotdraw.contrib.PolygonFigure#removePointAt(int)
   */
  def testRemovePointAt {
  }

  /**
   * Method testScaleRotate is testing scaleRotate
   * @see org.jhotdraw.contrib.PolygonFigure#scaleRotate(java.awt.Point, java.awt.Polygon, java.awt.Point)
   */
  def testScaleRotate {
  }

  /**
   * Method testSmoothPoints is testing smoothPoints
   * @see org.jhotdraw.contrib.PolygonFigure#smoothPoints()
   */
  def testSmoothPoints {
  }

  /**
   * Method testSplitSegment is testing splitSegment
   * @see org.jhotdraw.contrib.PolygonFigure#splitSegment(int, int)
   */
  def testSplitSegment {
  }

  /**
   * Method testPointAt is testing pointAt
   * @see org.jhotdraw.contrib.PolygonFigure#pointAt(int)
   */
  def testPointAt {
  }

  /**
   * Method testOutermostPoint is testing outermostPoint
   * @see org.jhotdraw.contrib.PolygonFigure#outermostPoint()
   */
  def testOutermostPoint {
  }

  /**
   * Method testFindSegment is testing findSegment
   * @see org.jhotdraw.contrib.PolygonFigure#findSegment(int, int)
   */
  def testFindSegment {
  }

  /**
   * Method testChop is testing chop
   * @see org.jhotdraw.contrib.PolygonFigure#chop(java.awt.Point)
   */
  def testChop {
  }

  /**
   * Method testWrite is testing write
   * @see org.jhotdraw.contrib.PolygonFigure#write(org.jhotdraw.util.StorableOutput)
   */
  def testWrite {
  }

  /**
   * Method testRead is testing read
   * @see org.jhotdraw.contrib.PolygonFigure#read(org.jhotdraw.util.StorableInput)
   */
  def testRead {
  }

  /**
   * Method testLocator is testing locator
   * @see org.jhotdraw.contrib.PolygonFigure#locator(int)
   */
  def testLocator {
  }

  /**
   * Method testBounds is testing bounds
   * @see org.jhotdraw.contrib.PolygonFigure#bounds(java.awt.Polygon)
   */
  def testBounds {
  }

  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  def testVault {
  }

  private var polygonfigure: PolygonFigure = null
}

