/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	ï¿½ by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.standard

import org.jhotdraw.standard.BoxHandleKit
import junit.framework.TestCase

// JUnitDoclet begin import
// JUnitDoclet end import
/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
// JUnitDoclet begin javadoc_class
/**
 * TestCase BoxHandleKitTest is generated by
 * JUnitDoclet to hold the tests for BoxHandleKit.
 * @see org.jhotdraw.standard.BoxHandleKit
 */
class BoxHandleKitTest(name: String) extends TestCase(name) {

  /**
   * Factory method for instances of the class to be tested.
   */
  def createInstance: BoxHandleKit = {
    return new BoxHandleKit
  }

  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  override protected def setUp {
    super.setUp
    boxhandlekit = createInstance
  }

  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  override protected def tearDown {
    boxhandlekit = null
    super.tearDown
  }

  /**
   * Method testAddCornerHandles is testing addCornerHandles
   * @see org.jhotdraw.standard.BoxHandleKit#addCornerHandles(org.jhotdraw.framework.Figure, java.util.List)
   */
  def testAddCornerHandles {
  }

  /**
   * Method testAddHandles is testing addHandles
   * @see org.jhotdraw.standard.BoxHandleKit#addHandles(org.jhotdraw.framework.Figure, java.util.List)
   */
  def testAddHandles {
  }

  /**
   * Method testSouth is testing south
   * @see org.jhotdraw.standard.BoxHandleKit#south(org.jhotdraw.framework.Figure)
   */
  def testSouth {
  }

  /**
   * Method testSouthEast is testing southEast
   * @see org.jhotdraw.standard.BoxHandleKit#southEast(org.jhotdraw.framework.Figure)
   */
  def testSouthEast {
  }

  /**
   * Method testSouthWest is testing southWest
   * @see org.jhotdraw.standard.BoxHandleKit#southWest(org.jhotdraw.framework.Figure)
   */
  def testSouthWest {
  }

  /**
   * Method testNorth is testing north
   * @see org.jhotdraw.standard.BoxHandleKit#north(org.jhotdraw.framework.Figure)
   */
  def testNorth {
  }

  /**
   * Method testNorthEast is testing northEast
   * @see org.jhotdraw.standard.BoxHandleKit#northEast(org.jhotdraw.framework.Figure)
   */
  def testNorthEast {
  }

  /**
   * Method testNorthWest is testing northWest
   * @see org.jhotdraw.standard.BoxHandleKit#northWest(org.jhotdraw.framework.Figure)
   */
  def testNorthWest {
  }

  /**
   * Method testEast is testing east
   * @see org.jhotdraw.standard.BoxHandleKit#east(org.jhotdraw.framework.Figure)
   */
  def testEast {
  }

  /**
   * Method testWest is testing west
   * @see org.jhotdraw.standard.BoxHandleKit#west(org.jhotdraw.framework.Figure)
   */
  def testWest {
  }

  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  def testVault {
  }

  private var boxhandlekit: BoxHandleKit = null
}

