/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	ï¿½ by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.figures

import org.jhotdraw.figures.FigureAttributes
import junit.framework.TestCase

// JUnitDoclet begin import
// JUnitDoclet end import
/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
// JUnitDoclet begin javadoc_class
/**
 * TestCase FigureAttributesTest is generated by
 * JUnitDoclet to hold the tests for FigureAttributes.
 * @see org.jhotdraw.figures.FigureAttributes
 */
class FigureAttributesTest(name: String) extends TestCase(name) {

  /**
   * Factory method for instances of the class to be tested.
   */
  def createInstance: FigureAttributes = {
    new FigureAttributes
  }

  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  override protected def setUp {
    super.setUp
    figureattributes = createInstance
  }

  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  override protected def tearDown {
    figureattributes = null
    super.tearDown
  }

  /**
   * Method testGet is testing get
   * @see org.jhotdraw.figures.FigureAttributes#get(org.jhotdraw.framework.FigureAttributeConstant)
   */
  def testGet {
  }

  /**
   * Method testSet is testing set
   * @see org.jhotdraw.figures.FigureAttributes#set(org.jhotdraw.framework.FigureAttributeConstant, java.lang.Object)
   */
  def testSet {
  }

  /**
   * Method testHasDefined is testing hasDefined
   * @see org.jhotdraw.figures.FigureAttributes#hasDefined(org.jhotdraw.framework.FigureAttributeConstant)
   */
  def testHasDefined {
  }

  /**
   * Method testClone is testing clone
   * @see org.jhotdraw.figures.FigureAttributes#clone()
   */
  def testClone {
  }

  /**
   * Method testRead is testing read
   * @see org.jhotdraw.figures.FigureAttributes#read(org.jhotdraw.util.StorableInput)
   */
  def testRead {
  }

  /**
   * Method testWrite is testing write
   * @see org.jhotdraw.figures.FigureAttributes#write(org.jhotdraw.util.StorableOutput)
   */
  def testWrite {
  }

  /**
   * Method testWriteColor is testing writeColor
   * @see org.jhotdraw.figures.FigureAttributes#writeColor(org.jhotdraw.util.StorableOutput, java.lang.String, java.awt.Color)
   */
  def testWriteColor {
  }

  /**
   * Method testReadColor is testing readColor
   * @see org.jhotdraw.figures.FigureAttributes#readColor(org.jhotdraw.util.StorableInput)
   */
  def testReadColor {
  }

  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  def testVault {
  }

  private var figureattributes: FigureAttributes = null
}

